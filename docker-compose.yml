version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sc-orgs-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - sc-orgs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sc-orgs-pgadmin
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - sc-orgs-network
    depends_on:
      postgres:
        condition: service_healthy

  # Backend API (for future use)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sc-orgs-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}/${DB_NAME}
      PORT: ${PORT}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      DISCORD_CALLBACK_URL: ${DISCORD_CALLBACK_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN}
      VERIFICATION_SECRET: ${VERIFICATION_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      RSI_API_BASE_URL: ${RSI_API_BASE_URL}
      RSI_SPECTRUM_API_BASE: ${RSI_SPECTRUM_API_BASE}
      RSI_COMMUNITY_HUB_API: ${RSI_COMMUNITY_HUB_API}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FILE: ${LOG_FILE}
      CORS_ORIGIN: ${CORS_ORIGIN}
      SESSION_SECRET: ${SESSION_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}
    ports:
      - "80:${PORT}"
    networks:
      - sc-orgs-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - full-stack  # Only start with docker-compose --profile full-stack up

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  sc-orgs-network:
    driver: bridge
